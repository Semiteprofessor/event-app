generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(cuid())
  firstName        String
  lastName         String
  email            String  @unique
  password         String
  gender           Gender
  coverId          String?
  coverUrl         String?
  coverBlurDataURL String?

  wishlist Product[] @relation("Wishlist")
  orders   Order[]   @relation("UserOrders")
  shop     Shop?     @relation(fields: [shopId], references: [id])
  shopId   String?

  recentProducts    Product[] @relation("RecentProducts")
  likedProducts     Product[] @relation("LikedProducts")
  purchasedProducts Product[] @relation("PurchasedProducts")

  phone   String
  status  String?
  address String?
  city    String?
  zip     String?
  country String?
  state   String?
  about   String?

  isVerified    Boolean   @default(false)
  otp           String
  lastOtpSentAt DateTime?
  commission    Float?

  role Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  male
  female
  other
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
  VENDOR
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id              String      @id @default(cuid())
  name            String?
  code            String?
  status          String?
  isFeatured      Boolean?
  brandId         String?
  brand           Brand?      @relation(fields: [brandId], references: [id])
  likes           Int?
  description     String?
  metaTitle       String?
  metaDescription String?
  slug            String      @unique
  categoryId      String
  category        Category    @relation(fields: [categoryId], references: [id])
  subCategoryId   String
  subCategory     SubCategory @relation(fields: [subCategoryId], references: [id])
  gender          String?
  tags            String[]
  sku             String
  price           Float
  priceSale       Float
  oldPriceSale    Float?
  available       Int
  sold            Int         @default(0)

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  reviews ProductReview[]

  images ProductImage[]

  colors String[]
  sizes  String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id          String  @id @default(cuid())
  url         String
  imageId     String
  blurDataURL String
  productId   String
  product     Product @relation(fields: [productId], references: [id])
}

model ProductReview {
  id           String               @id @default(cuid())
  userId       String
  user         User                 @relation(fields: [userId], references: [id])
  productId    String
  product      Product              @relation(fields: [productId], references: [id])

  review       String
  rating       Int
  isPurchased  Boolean

  images       ReviewImage[]

  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ReviewImage {
  id          String          @id @default(cuid())
  url         String
  blurDataURL String
  reviewId    String
  review      ProductReview   @relation(fields: [reviewId], references: [id])
}

model Review {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  rating       Int
  review       String
  designation  String
  createdAt    DateTime @default(now())
}
