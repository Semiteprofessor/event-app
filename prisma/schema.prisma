generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(cuid())
  firstName          String
  lastName           String
  email              String        @unique
  password           String
  gender             Gender
  coverId            String?
  coverUrl           String?
  coverBlurDataURL   String?

  wishlist           Product[]     @relation("Wishlist")
  orders             Order[]       @relation("UserOrders")
  shop               Shop?         @relation(fields: [shopId], references: [id])
  shopId            String?

  recentProducts     Product[]     @relation("RecentProducts")
  likedProducts      Product[]     @relation("LikedProducts")
  purchasedProducts  Product[]     @relation("PurchasedProducts")

  phone             String
  status            String?
  address           String?
  city              String?
  zip               String?
  country           String?
  state             String?
  about            String?

  isVerified        Boolean        @default(false)
  otp              String
  lastOtpSentAt    DateTime?
  commission       Float?

  role             Role

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}


enum Gender {
  male
  female
  other
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
  VENDOR
}


model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Event {
  id String @id @default(cuid())

  userId  String
  creator User   @relation("CreatorEvents", fields: [userId], references: [id])

  name        String
  description String

  organizerId String
  organizer   User   @relation("OrganizerEvents", fields: [organizerId], references: [id])

  organizerName  String?
  organizerEmail String?
  hostEmail      String?
  posterEmail    String?

  guests         String[] @default([])
  attendeesEmail String[] @default([])

  address   String
  city      String
  pincode   Int?
  date      DateTime
  startTime String?
  stopTime  String?

  sideAttractions  String[] @default([])
  allowInstallment Boolean  @default(false)
  isPrivate        Boolean  @default(false)

  media             Media[]
  ticketTypes       TicketType[]
  activities        Activity[]
  installmentConfig InstallmentConfig?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id        String   @id @default(cuid())
  url       String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
}

model TicketType {
  id       String @id @default(cuid())
  type     String
  price    Float
  quantity Int?
  booked   Int    @default(0)
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  String
}

model Activity {
  id      String @id @default(cuid())
  title   String
  speaker String
  time    String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
}

model InstallmentConfig {
  id                   String @id @default(cuid())
  numberOfInstallments Int
  minPerInstallment    Float
  event                Event  @relation(fields: [eventId], references: [id])
  eventId              String @unique
}

enum UserRole {
  USER
  ADMIN
}
